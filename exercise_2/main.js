/* 2. Не выполняя кода, ответить, что выведет браузер и почему: */

if (!("a" in window)) {
  var a = 1;
}
alert(a); //undefined

/* Решение:
Переменная а объявляется в глобальной области видимости, т.е window
Изначально она undefined,  и поскольку условие внутри if-false,
 а так и останется undefined. */

var b = function a(x) {
  x && a(--x);
};
alert(a); //ошибка

/* Решение:
В глобально области видимости создастся переменная b,потом произойдет вызов а. 
Но поскольку функция а была бы определена в области видимости уже ранее созданной b,
из глобальной области видимости мы ее не видим. Поэтому вызвать а мы не сможем.
 */

function a(x) {
  return x * 2;
}

var a;
alert(a);//function a(x) {return x * 2;}

/* Решение:
В глобальной области создается функция с имененем a .
Далее мы объявим переменную а без присваивания.
В глобальной области видимости ключу а уже присвоено значение  = функция,
поэтому результатом вызова alert станенет function a(x) {return x * 2;}

 */

function b(x, y, a) {
  arguments[2] = 10;
  alert(a);//10
}
b(1, 2, 3);
/* Решение:
Назначем функцию b, вызываем ее с аргументами.
Внутри блока функции обращаемся к массивоподобному спец. объекту arguments, куда записываются все передаваемые ф-ии арг-ты.
Соответвственно 2 элемент массива arguments - а перезаписывает в себя значение 10
 */


function a() {
  alert(this);
}
a.call(null);//window

/* Решение:
Вызываем функцию a с контекстом null. В старом стандарте при передаче null в call передается windows
 */
